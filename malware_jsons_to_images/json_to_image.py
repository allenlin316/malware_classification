import os
import json
import time
import pandas as pd
import numpy as np
from collections import Counter
import matplotlib.pyplot as plt

def json_to_csv():
    json_directory = os.listdir("all_report_json")
    process_num = 0 # process number of each api call

    for file in json_directory:
        with open(os.path.join("all_report_json", file)) as cur_json:
            data = json.load(cur_json)
        start_time = data['info']['started']        #從data中擷取需要用到的資訊
        end_time = data['info']['ended']
        processes = data['behavior']['processes']
        process_num += 1

        rows = []
        # Iterate through the processes and calls to populate the DataFrame
        for process_num, process in enumerate(processes):
            for call in process['calls']:
                # Append the new row as a dictionary
                new_row = {
                    'process_num': process_num,
                    'call_category': call['category'],
                    'call_api': call['api'],
                    'call_time': call['time']
                }
                rows.append(new_row)
        report_df = pd.DataFrame(rows)
        if not report_df.empty: # if the dataframe of report_df is not empty
            # Sort the DataFrame by call_time
            report_df = report_df.sort_values(by=['call_time'])
            csv_file_name = os.path.splitext(file)[0]
            report_df.to_csv(os.path.join("all_report_csv", csv_file_name+".csv"), index=False)

def count_api_frequency(csv_file):
    start_time = csv_file['call_time'][0]
    end_time = csv_file['call_time'][len(csv_file)-1]
    unit_time = (end_time - start_time)/16 # each unit time
    call_cat_count = [] # count for api category numbers of each unit time 
    for i in range(16) :    
        current_inteval_start_time = start_time + (i)*unit_time   # start time of each unit time
        current_inteval_end_time =  start_time + (i+1)*unit_time  
        current_interval_call_cat = []                                                    
        for  j in range( len( csv_file ) ):
            time = csv_file['call_time'][j]             
            if( time >= current_inteval_start_time and time < current_inteval_end_time ) : #在這個時間段裡面的call要記錄下來
                current_interval_call_cat.append(csv_file['call_category'][j])
            elif( i == 15 and time >= current_inteval_start_time ) : #剛好最後一個時間段了，剩下的全部丟進去，以免漏掉
                current_interval_call_cat.append(csv_file['call_category'][j])           
            
        call_cat_count.append( Counter(current_interval_call_cat) )   # Counter函數會自動幫我們計數，非常好用
    
    return call_cat_count

def hex_to_rgb(hex_color):
    # Remove the hash symbol if it's there
    hex_color = hex_color.lstrip('#')
    # Convert hex to RGB
    rgb = tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
    
    return rgb

def get_color_index(occurrence_per_unit): # retrieve column index of API category 
    match occurrence_per_unit:
        case _ if occurrence_per_unit == 0:
            return 0
        case _ if occurrence_per_unit in range(0, 4):
            return 1
        case _ if occurrence_per_unit in range(4, 8):
            return 2
        case _ if occurrence_per_unit in range(8, 13):
            return 3
        case _ if occurrence_per_unit in range(13, 19):
            return 4
        case _ if occurrence_per_unit in range(19, 26):
            return 5
        case _ if occurrence_per_unit in range(26, 34):
            return 6
        case _ if occurrence_per_unit in range(34, 43):
            return 7
        case _ if occurrence_per_unit in range(43, 101):
            return 8
        case _ if occurrence_per_unit in range(101, 201):
            return 9
        case _ if occurrence_per_unit > 200:
            return 10

def csv_to_image(call_cate_count, color_mapping_file, csv_filename):
    feature_image_row = [[255,255,255] for i in range(16)]
    feature_image = [feature_image_row for i in range(16)]
    feature_image = np.array(feature_image) # transform to numpy array in order to save the picture
    
    # consider below 16 api categories
    api_category_db = {'synchronisation':0, 'process':1, 'system':2, 'exception':3, 'ole':4, 'file':5, 'resource':6,
                'registry':7, 'ui':8, 'misc':9, '__notification__':10, 'network':11, 'certificate':12, 'crypto':13,
                'services':14, 'other': 15}

    for i in range(16):
        cur_interval_cate = call_cate_count[i]
        for category in cur_interval_cate: # color mapping of each category
            cur_call_interval_count = cur_interval_cate[category]
            index = get_color_index(cur_call_interval_count)
            if category in api_category_db:
                hex_color = color_mapping_file[category][index]
                rgb_color = hex_to_rgb(hex_color)
                feature_image[api_category_db[category]][i] = rgb_color
            else: # not in category list so in the 'other' category
                hex_color = color_mapping_file['other'][index]
                rgb_color = hex_to_rgb(hex_color)
                feature_image[api_category_db['other']][i] = rgb_color

    # save image
    plt.imshow(feature_image)
    plt.axis("off")
    file_path = os.path.join("all_report_jpg", os.path.splitext(csv_filename)[0]+".jpg")
    plt.savefig(file_path, bbox_inches = 'tight', pad_inches=-0.0)

if __name__ == '__main__':
    json_to_csv()
    color_mapping_file = pd.read_csv("color_mapping_file_hex.csv")
    csv_files = os.listdir("all_report_csv")
    for filename in csv_files:
        file_path = os.path.join("all_report_csv", filename)
        csv_file = pd.read_csv(file_path)
        call_cat_count = count_api_frequency(csv_file)
        #print(call_cat_count)
        csv_to_image(call_cat_count, color_mapping_file, filename)

